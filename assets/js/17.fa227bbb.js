(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{628:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"jvm内存区域讲解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存区域讲解"}},[t._v("#")]),t._v(" JVM内存区域讲解")]),t._v(" "),s("blockquote",[s("p",[t._v("本文来源于 JavaGuide")]),t._v(" "),s("p",[t._v("原文地址："),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/3965c02cc0f294b0bd3580df4868d5e396959e2e/Java%E7%9B%B8%E5%85%B3/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8AJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Snailclimb/JavaGuide/blob/3965c02cc0f294b0bd3580df4868d5e396959e2e/Java%E7%9B%B8%E5%85%B3/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8AJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.md"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"基本问题："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本问题："}},[t._v("#")]),t._v(" 基本问题：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("介绍下 Java 内存区域（运行时数据区）")])]),t._v(" "),s("li",[s("strong",[t._v("Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）")])]),t._v(" "),s("li",[s("strong",[t._v("对象的访问定位的两种方式（句柄和直接指针两种方式）")])])]),t._v(" "),s("h3",{attrs:{id:"拓展问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展问题"}},[t._v("#")]),t._v(" 拓展问题:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("String类和常量池")])]),t._v(" "),s("li",[s("strong",[t._v("8种基本类型的包装类和常量池")])])]),t._v(" "),s("h2",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1 概述")]),t._v(" "),s("p",[t._v("对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。")]),t._v(" "),s("h2",{attrs:{id:"_2-运行时数据区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行时数据区域"}},[t._v("#")]),t._v(" 2 运行时数据区域")]),t._v(" "),s("p",[t._v("Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。 "),s("img",{attrs:{src:"https://camo.githubusercontent.com/b997da2ae0e32fac704c8dc813973f3778316676/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d332f4a564d2545382542462539302545382541312538432545362539372542362545362539352542302545362538442541452545352538432542412545352539462539462e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("这些组成部分一些是线程私有的，其他的则是线程共享的。")]),t._v(" "),s("p",[s("strong",[t._v("线程私有的：")])]),t._v(" "),s("ul",[s("li",[t._v("程序计数器")]),t._v(" "),s("li",[t._v("虚拟机栈")]),t._v(" "),s("li",[t._v("本地方法栈")])]),t._v(" "),s("p",[s("strong",[t._v("线程共享的：")])]),t._v(" "),s("ul",[s("li",[t._v("堆")]),t._v(" "),s("li",[t._v("方法区")]),t._v(" "),s("li",[t._v("直接内存")])]),t._v(" "),s("h3",{attrs:{id:"_2-1-程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-程序计数器"}},[t._v("#")]),t._v(" 2.1 程序计数器")]),t._v(" "),s("p",[t._v("程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。"),s("strong",[t._v("字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。")])]),t._v(" "),s("p",[t._v("另外，"),s("strong",[t._v("为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。")])]),t._v(" "),s("p",[s("strong",[t._v("从上面的介绍中我们知道程序计数器主要有两个作用：")])]),t._v(" "),s("ol",[s("li",[t._v("字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。")]),t._v(" "),s("li",[t._v("在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。")])]),t._v(" "),s("p",[s("strong",[t._v("注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-java-虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-java-虚拟机栈"}},[t._v("#")]),t._v(" 2.2 Java 虚拟机栈")]),t._v(" "),s("p",[s("strong",[t._v("与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。")])]),t._v(" "),s("p",[s("strong",[t._v("Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。")]),t._v(" （实际上，Java虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）")]),t._v(" "),s("p",[s("strong",[t._v("局部变量表主要存放了编译器可知的各种数据类型")]),t._v("（boolean、byte、char、short、int、float、long、double）、"),s("strong",[t._v("对象引用")]),t._v("（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。")]),t._v(" "),s("p",[s("strong",[t._v("Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("StackOverFlowError：")]),t._v(" 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。")]),t._v(" "),s("li",[s("strong",[t._v("OutOfMemoryError：")]),t._v(" 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。")])]),t._v(" "),s("p",[t._v("Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-本地方法栈"}},[t._v("#")]),t._v(" 2.3 本地方法栈")]),t._v(" "),s("p",[t._v("和虚拟机栈所发挥的作用非常相似，区别是： "),s("strong",[t._v("虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。")]),t._v(" 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。")]),t._v(" "),s("p",[t._v("本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。")]),t._v(" "),s("p",[t._v("方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-堆"}},[t._v("#")]),t._v(" 2.4 堆")]),t._v(" "),s("p",[t._v("Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。"),s("strong",[t._v("此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。")])]),t._v(" "),s("p",[t._v("Java 堆是垃圾收集器管理的主要区域，因此也被称作"),s("strong",[t._v("GC堆（Garbage Collected Heap）")]),t._v(".从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点有：Eden空间、From Survivor、To Survivor空间等。"),s("strong",[t._v("进一步划分的目的是更好地回收内存，或者更快地分配内存。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/05d1fe88e8ac4b03f299af3519b37e76ba4bebf3/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32352f313635373033343461323963333433333f773d35393926683d32353026663d706e6726733d38393436",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32352f313635373033343461323963333433333f773d35393926683d32353026663d706e6726733d38393436.jfif",alt:"img"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("在 JDK 1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域（永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制）。")])]),t._v(" "),s("p",[t._v("推荐阅读：")]),t._v(" "),s("ul",[s("li",[t._v("《Java8内存模型—永久代(PermGen)和元空间(Metaspace)》：http://www.cnblogs.com/paddix/p/5309550.html")])]),t._v(" "),s("h3",{attrs:{id:"_2-5-方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-方法区"}},[t._v("#")]),t._v(" 2.5 方法区")]),t._v(" "),s("p",[s("strong",[t._v("方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。")])]),t._v(" "),s("p",[t._v("HotSpot 虚拟机中方法区也常被称为 "),s("strong",[t._v("“永久代”")]),t._v("，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。")]),t._v(" "),s("p",[s("strong",[t._v("相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。")])]),t._v(" "),s("h3",{attrs:{id:"_2-6-运行时常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-运行时常量池"}},[t._v("#")]),t._v(" 2.6 运行时常量池")]),t._v(" "),s("p",[t._v("运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）")]),t._v(" "),s("p",[t._v("既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。")]),t._v(" "),s("p",[s("strong",[t._v("JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/17620721a9f326a235aeec8956949cec03f3f125/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d31342f32363033383433332e6a7067",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/687474703a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f31382d392d31342f32363033383433332e6a7067.jfif",alt:"img"}}),s("OutboundLink")],1),t._v(" ——图片来源：https://blog.csdn.net/wangbiao007/article/details/78545189")]),t._v(" "),s("p",[t._v("推荐阅读：")]),t._v(" "),s("ul",[s("li",[t._v("《Java 中几种常量池的区分》： https://blog.csdn.net/qq_26222859/article/details/73135660")])]),t._v(" "),s("h3",{attrs:{id:"_2-7-直接内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-直接内存"}},[t._v("#")]),t._v(" 2.7 直接内存")]),t._v(" "),s("p",[t._v("直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 异常出现。")]),t._v(" "),s("p",[t._v("JDK1.4中新加入的 "),s("strong",[t._v("NIO(New Input/Output) 类")]),t._v("，引入了一种基于"),s("strong",[t._v("通道（Channel）")]),t._v(" 与"),s("strong",[t._v("缓存区（Buffer）")]),t._v(" 的 I/O 方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为"),s("strong",[t._v("避免了在 Java 堆和 Native 堆之间来回复制数据")]),t._v("。")]),t._v(" "),s("p",[t._v("本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。")]),t._v(" "),s("h2",{attrs:{id:"_3-hotspot-虚拟机对象探秘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-hotspot-虚拟机对象探秘"}},[t._v("#")]),t._v(" 3 HotSpot 虚拟机对象探秘")]),t._v(" "),s("p",[t._v("通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-对象的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-对象的创建"}},[t._v("#")]),t._v(" 3.1 对象的创建")]),t._v(" "),s("p",[t._v("下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。 "),s("a",{attrs:{href:"https://camo.githubusercontent.com/e99480df412dd718430d78094143a5485c908fa7/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239.jfif",alt:"Java对象的创建过程"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("①类加载检查：")]),t._v(" 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。")]),t._v(" "),s("p",[s("strong",[t._v("②分配内存：")]),t._v(" 在"),s("strong",[t._v("类加载检查")]),t._v("通过后，接下来虚拟机将为新生对象"),s("strong",[t._v("分配内存")]),t._v("。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。"),s("strong",[t._v("分配方式")]),t._v("有 "),s("strong",[t._v("“指针碰撞”")]),t._v(" 和 "),s("strong",[t._v("“空闲列表”")]),t._v(" 两种，"),s("strong",[t._v("选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("内存分配的两种方式：（补充内容，需要掌握）")])]),t._v(" "),s("p",[t._v('选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是"标记-清除"，还是"标记-整理"（也称作"标记-压缩"），值得注意的是，复制算法内存也是规整的')]),t._v(" "),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/65fc0c035f1f70081f4dcdd113c3b2c7aa931a2a/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343061326333643f773d3134323626683d33333326663d706e6726733d3236333436",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343061326333643f773d3134323626683d33333326663d706e6726733d3236333436.jfif",alt:"img"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("内存分配并发问题（补充内容，需要掌握）")])]),t._v(" "),s("p",[t._v("在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("CAS+失败重试：")]),t._v(" CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。"),s("strong",[t._v("虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。")])]),t._v(" "),s("li",[s("strong",[t._v("TLAB：")]),t._v(" 为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配")])]),t._v(" "),s("p",[s("strong",[t._v("③初始化零值：")]),t._v(" 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。")]),t._v(" "),s("p",[s("strong",[t._v("④设置对象头：")]),t._v(" 初始化零值完成之后，"),s("strong",[t._v("虚拟机要对对象进行必要的设置")]),t._v("，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 "),s("strong",[t._v("这些信息存放在对象头中。")]),t._v(" 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。")]),t._v(" "),s("p",[s("strong",[t._v("⑤执行 init 方法：")]),t._v(" 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，"),s("code",[t._v("方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行")]),t._v(" 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。")]),t._v(" "),s("h3",{attrs:{id:"_3-2-对象的内存布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-对象的内存布局"}},[t._v("#")]),t._v(" 3.2 对象的内存布局")]),t._v(" "),s("p",[t._v("在 Hotspot 虚拟机中，对象在内存中的布局可以分为3块区域："),s("strong",[t._v("对象头")]),t._v("、"),s("strong",[t._v("实例数据")]),t._v("和"),s("strong",[t._v("对齐填充")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("Hotspot虚拟机的对象头包括两部分信息")]),t._v("，"),s("strong",[t._v("第一部分用于存储对象自身的自身运行时数据")]),t._v("（哈希码、GC分代年龄、锁状态标志等等），"),s("strong",[t._v("另一部分是类型指针")]),t._v("，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。")]),t._v(" "),s("p",[s("strong",[t._v("实例数据部分是对象真正存储的有效信息")]),t._v("，也是在程序中所定义的各种类型的字段内容。")]),t._v(" "),s("p",[s("strong",[t._v("对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。")]),t._v(" 因为Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-对象的访问定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-对象的访问定位"}},[t._v("#")]),t._v(" 3.3 对象的访问定位")]),t._v(" "),s("p",[t._v("建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，目前主流的访问方式有"),s("strong",[t._v("①使用句柄")]),t._v("和"),s("strong",[t._v("②直接指针")]),t._v("两种：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("句柄：")]),t._v(" 如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息； "),s("a",{attrs:{href:"https://camo.githubusercontent.com/5923998f8408ea936a0416291faf1b2a1d215108/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32372f313633303662393537333936383934363f773d37383626683d33363226663d706e6726733d313039323031",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32372f313633303662393537333936383934363f773d37383626683d33363226663d706e6726733d313039323031.jfif",alt:"使用句柄"}}),s("OutboundLink")],1)]),t._v(" "),s("li",[s("strong",[t._v("直接指针：")]),t._v(" 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/af3d3845b1d5d9c1927e77f79d2cb96ea84090fe/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32372f313633303662613361343162366236353f773d37363626683d33353326663d706e6726733d3939313732",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32372f313633303662613361343162366236353f773d37363626683d33353326663d706e6726733d3939313732.jfif",alt:"使用直接指针"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。")])]),t._v(" "),s("h2",{attrs:{id:"四-重点补充内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-重点补充内容"}},[t._v("#")]),t._v(" 四 重点补充内容")]),t._v(" "),s("h3",{attrs:{id:"string-类和常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类和常量池"}},[t._v("#")]),t._v(" String 类和常量池")]),t._v(" "),s("p",[s("strong",[t._v("1 String 对象的两种创建方式：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("p",[t._v("这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。 "),s("a",{attrs:{href:"https://camo.githubusercontent.com/83e5520e2e0fe8c2b4b1575da9b06d42bbac581f/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961353963303837333f773d36393826683d33353526663d706e6726733d3130343439",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961353963303837333f773d36393826683d33353526663d706e6726733d3130343439.jfif",alt:"img"}}),s("OutboundLink")],1),t._v(" 记住：只要使用new方法，便需要创建新的对象。")]),t._v(" "),s("p",[s("strong",[t._v("2 String 类型的常量池比较特殊。它的主要使用方法有两种：")])]),t._v(" "),s("ul",[s("li",[t._v("直接使用双引号声明出来的 String 对象会直接存储在常量池中。")]),t._v(" "),s("li",[t._v("如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"计算机"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"计算机"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//计算机")]),t._v("\n\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false，因为一个是堆内存中的String对象一个是常量池中的String对象，")]),t._v("\n\t      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true，因为两个都是常量池中的String对象")]),t._v("\n")])])]),s("p",[s("strong",[t._v("3 String 字符串拼接")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ing"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t  \n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ing"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池中的对象")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在堆上创建的新的对象\t  ")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量池中的对象")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\t\t  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/34b5b7e57a2e001dd120546ba61720367b0951e9/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961346431336639323f773d35393326683d36303326663d706e6726733d3232323635",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"E:/%E6%88%91%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91/OneDrive/%E5%AD%A6%E4%B9%A0/%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87/note_images/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961346431336639323f773d35393326683d36303326663d706e6726733d3232323635.jfif",alt:"img"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。")]),t._v(" "),s("h3",{attrs:{id:"string-s1-new-string-abc-这句话创建了几个对象？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-s1-new-string-abc-这句话创建了几个对象？"}},[t._v("#")]),t._v(' String s1 = new String("abc");这句话创建了几个对象？')]),t._v(" "),s("p",[s("strong",[t._v("创建了两个对象。")])]),t._v(" "),s("p",[s("strong",[t._v("验证：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 堆内存的地址值")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出true")]),t._v("\n")])])]),s("p",[s("strong",[t._v("结果：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[s("strong",[t._v("解释：")])]),t._v(" "),s("p",[t._v('先有字符串"abc"放入常量池，然后 new 了一份字符串"abc"放入Java堆(字符串常量"abc"在编译期就已经确定放入常量池，而 Java 堆上的"abc"是在运行期初始化阶段才确定)，然后 Java 栈的 str1 指向Java堆上的"abc"。')]),t._v(" "),s("h3",{attrs:{id:"_8种基本类型的包装类和常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8种基本类型的包装类和常量池"}},[t._v("#")]),t._v(" 8种基本类型的包装类和常量池")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Java 基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。")])]),t._v(" "),s("li",[s("strong",[t._v("两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出true")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i11 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("333")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i22 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("333")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i11 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i22"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v(" i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v(" i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false")]),t._v("\n")])])]),s("p",[s("strong",[t._v("Integer 缓存源代码：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n*此方法将始终缓存-128到127（包括端点）范围内的值，并可以缓存此范围之外的其他值。\n*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("应用场景：")])]),t._v(" "),s("ol",[s("li",[t._v("Integer i1=40；Java 在编译的时候会直接将代码封装成Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。")]),t._v(" "),s("li",[t._v("Integer i1 = new Integer(40);这种情况下会创建新的对象。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出false")]),t._v("\n")])])]),s("p",[s("strong",[t._v("Integer比较更丰富的一个例子:")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i6 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i1=i2   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i1=i2+i3   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i1=i4   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i4=i5   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i4=i5+i6   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"40=i5+i6   "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n")])])]),s("p",[t._v("结果：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("i1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i2   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ni1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i3   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ni1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i4   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\ni4"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i5   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\ni4"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i5"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i6   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i5"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i6   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("解释：")]),t._v(" "),s("p",[t._v("语句i4 == i5 + i6，因为+这个操作符不适用于Integer对象，首先i5和i6进行自动拆箱操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int值40，最终这条语句转为40 == 40进行数值比较。")])])}),[],!1,null,null,null);a.default=e.exports}}]);