(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{382:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第14次题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第14次题"}},[t._v("#")]),t._v(" 第14次题")]),t._v(" "),a("p",[a("strong",[t._v("1. java 中哪个关键字可以对对象加互斥锁？")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("transient\nsynchronized\nserialize\nstatic\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("synchronized")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[a("strong",[t._v("synchronized")]),t._v(" "),a("strong",[t._v("关键字")]),t._v(" "),a("strong",[t._v(":")]),t._v(" 用来给对象和方法或者代码块加锁，当它锁定一个方法或者一个代码块的时候，同一时刻最多只有一个线程执行这个段代码。")]),t._v(" "),a("p",[t._v("**volatile：**用来确保将变量的跟新操作通知到其他线程，当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。然而，在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比 synchronized关键字更轻量级的同步机制。")]),t._v(" "),a("p",[t._v("**serialize：**Java 对象序列化为二进制文件。")]),t._v(" "),a("p",[a("strong",[t._v("static关键字：")]),t._v(" static关键字可以修饰变量，方法，静态代码块。")]),t._v(" "),a("p",[t._v("​             静态变量:")]),t._v(" "),a("p",[t._v("​                     由static修饰的变量称为静态变量")]),t._v(" "),a("p",[t._v("​                     静态变量属于类，而不属于某个对象")]),t._v(" "),a("p",[t._v("​                     静态变量它的副本只有一个(静态变量在类中只加载一)")]),t._v(" "),a("p",[t._v("​             静态方法：")]),t._v(" "),a("p",[t._v("​                     在静态方法中只能调用静态变量和静态方法")]),t._v(" "),a("p",[t._v("​                     在非静态方法中，可以调用静态方法或者变量。")]),t._v(" "),a("p",[t._v("​                     在静态方法中不能使用this和super关键字。")]),t._v(" "),a("p",[t._v("​            静态代码块")]),t._v(" "),a("p",[t._v("​                     作用:用来给静态成员变量初始化")]),t._v(" "),a("p",[t._v("**transient：**序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n关于以上修饰哪些能修饰类，哪些能修饰接口等等")]),t._v(" "),a("p",[a("strong",[t._v("2. 以下哪个不是Collection的子接口？")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("List\nSet\nSortedSet\nMap\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("Map")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("Collection主要的子接口:\nList:可以存放重复内容\nSet:不能存放重复内容,所有重复的内容靠hashCode()和equals()两个方法区分\nQueue:队列接口\nSortedSet:可以对集合中的数据进行排序")]),t._v(" "),a("p",[t._v("Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value。Map接口提供3种集合的视图，Map的内容可以被当作一组key集合，一组value集合，或者一组key-value映射。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://alanlee-image-bed.oss-cn-shenzhen.aliyuncs.com/note_images/20200205112745-655091.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("3. 以下关于Object类的说法正确的是（）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("A、Java中所有的类都直接或间接继承自Object，无论是否明确的指明，无论其是否是抽象类。\nB、Java中的接口(interface)也继承了Object类\nC、利用“==”比较两个对象时，Java调用继承自Object的equals方法，判断是否相等。\nD、如果类的定义中没有重新定义toString()方法，则该类创建的对象无法使用toStrig()方法。\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("A")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("Object 是基类 Java中的所有的类都直接或间接的继承；所以A对\n从一个class派生的必然是另一个class。Object是一个class，如果interface继承自Object，那么interface必然是一个class，所以B错\n利用equals()方法进行比较时 会调用== 可以看equals()方法的源码，可以这样说， == 比equal更加强大，所以C错\ntoString()方法是Object类中 即使不重写也能使用 所以D错")]),t._v(" "),a("p",[a("strong",[t._v("4. 若有下列定义，下列哪个表达式返回false？")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'o'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("选项")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('A、s.equals(t);\nB、t.equals(c);\nC、s==t;\nD、t.equals(new String("hello"));\n')])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("B")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("选B。")]),t._v(" "),a("p",[t._v("A、D选项是对字符串内容的比较。JVM为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被成为**字符串常量池。**代码中出现字面量形式创建字符串对象时，JVM首先会对这个字面量进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回，否则新的字符串对象被创建，然后将这个引用放入字符串常量池，并返回该引用。所以返回true。")]),t._v(" "),a("p",[t._v("C选项是引用地址的比较，同上也属于"),a("strong",[t._v("常量池的同一个字符串地址")]),t._v("，所以相等返回true。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://alanlee-image-bed.oss-cn-shenzhen.aliyuncs.com/note_images/20200205113823-405204.jpeg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("5.假如某个JAVA进程的JVM参数配置如下：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms1G")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx2G")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmn500M")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MaxPermSize")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("M "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseConcMarkSweepGC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SurvivorRatio")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("p",[a("strong",[t._v("请问eden区最终分配的大小是多少？")])]),t._v(" "),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("300M\n")])])]),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("java "),a("strong",[t._v("-Xmx2G -Xms1G -Xmn500M")]),t._v(" "),a("strong",[t._v("-Xss128k")])]),t._v(" "),a("p",[a("strong",[t._v("-Xmx2G")]),t._v("：设置JVM最大可用内存为2G。\n"),a("strong",[t._v("-Xms1G")]),t._v("：设置JVM促使内存为1G。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。")]),t._v(" "),a("p",[a("strong",[t._v("-Xmn500M")]),t._v("：设置年轻代大小为2G。"),a("strong",[t._v("整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("-XX:SurvivorRatio=3")]),t._v("：新生代中又会划分为 Eden 区，from Survivor、to Survivor 区。")]),t._v(" "),a("p",[t._v("其中 Eden 和 Survivor 区的比例默认是 8:1:1，当然也支持参数调整 -XX:SurvivorRatio=3的话就是3:1:1。")]),t._v(" "),a("p",[t._v("故该题为500*（3/5）=300M.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Xms 起始内存\nXmx 最大内存\nXmn 新生代内存\nXss 栈大小。 就是创建线程后，分配给每一个线程的内存大小\n-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4\n-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5\n-XX:MaxPermSize=n:设置持久代大小\n\n收集器设置\n-XX:+UseSerialGC:设置串行收集器\n-XX:+UseParallelGC:设置并行收集器\n-XX:+UseParalledlOldGC:设置并行年老代收集器\n-XX:+UseConcMarkSweepGC:设置并发收集器\n垃圾回收统计信息\n-XX:+PrintGC\n-XX:+PrintGCDetails\n-XX:+PrintGCTimeStamps\n-Xloggc:filename\n并行收集器设置\n-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。\n-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间\n-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)\n并发收集器设置\n-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。\n-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。\n")])])]),a("p",[a("strong",[t._v("6. 下面哪些情况可以引发异常：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("数组越界\n指定URL不存在\n使用throw语句抛出\n使用throws语句\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("数组越界\n指定URL不存在\n使用throw语句抛出")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("1、throws出现在方法头，throw出现在方法体")]),t._v(" "),a("p",[t._v("2、throws表示出现异常的一种可能性，并不一定会发生异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。")]),t._v(" "),a("p",[t._v("3、两者都是消极的异常处理方式，只是抛出或者可能抛出异常，是不会由函数处理，真正的处理异常由它的上层调用处理。")]),t._v(" "),a("p",[a("strong",[t._v("7. 下面的switch语句中，x可以是哪些类型的数据：()")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("String byte short int char Enum")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("在Java7之前，switch只能支持 byte、short、char、int或者其对应的封装类以及Enum类型。")]),t._v(" "),a("p",[t._v("在Java7中，也支持了String类型，String byte short int char Enum 类型")]),t._v(" "),a("p",[a("strong",[t._v("8. 截止JDK1.8版本,java并发框架支持锁包括?")])]),t._v(" "),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("Java锁的种类以及辨析 锁作为并发共享数据，保证一致性的工具，在JAVA平台有多种实现(如 synchronized 和 ReentrantLock等等 ) 。这些已经写好提供的锁为我们开发提供了便利，但是锁的具体性质以及类型却很少被提及。本系列文章将分析JAVA中常见的锁以及其特性，为大家答疑解惑。")]),t._v(" "),a("p",[t._v("1、自旋锁 ,自旋，jvm默认是10次吧，有jvm自己控制。for去争取锁")]),t._v(" "),a("p",[t._v("2、阻塞锁 被阻塞的线程，不会争夺锁。")]),t._v(" "),a("p",[t._v("3、可重入锁 多次进入改锁的域")]),t._v(" "),a("p",[t._v("4、读写锁")]),t._v(" "),a("p",[t._v("5、互斥锁 锁本身就是互斥的")]),t._v(" "),a("p",[t._v("6、悲观锁 不相信，这里会是安全的，必须全部上锁")]),t._v(" "),a("p",[t._v("7、乐观锁 相信，这里是安全的。")]),t._v(" "),a("p",[t._v("8、公平锁 有优先级的锁")]),t._v(" "),a("p",[t._v("9、非公平锁 无优先级的锁")]),t._v(" "),a("p",[t._v("10、偏向锁 无竞争不锁，有竞争挂起，转为轻量锁")]),t._v(" "),a("p",[t._v("11、对象锁 锁住对象")]),t._v(" "),a("p",[t._v("12、线程锁")]),t._v(" "),a("p",[t._v("13、锁粗化 多锁变成一个，自己处理")]),t._v(" "),a("p",[t._v("14、轻量级锁 CAS 实现")]),t._v(" "),a("p",[t._v("15、锁消除 偏向锁就是锁消除的一种")]),t._v(" "),a("p",[t._v("16、锁膨胀 jvm实现，锁粗化")]),t._v(" "),a("p",[t._v("17、信号量 使用阻塞锁 实现的一种策略")]),t._v(" "),a("p",[t._v("18、排它锁：X锁，若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。")]),t._v(" "),a("p",[a("strong",[t._v("9. 以下哪些类是线程安全的（）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Vector\nHashMap\nArrayList\nStringBuffer\nProperties\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("Vector")]),t._v(" "),a("p",[t._v("StringBuffer")]),t._v(" "),a("p",[t._v("Properties")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("A，Vector相当于一个线程安全的List")]),t._v(" "),a("p",[t._v("B，HashMap是非线程安全的，其对应的线程安全类是HashTable")]),t._v(" "),a("p",[t._v("C，Arraylist是非线程安全的，其对应的线程安全类是Vector")]),t._v(" "),a("p",[t._v("D，StringBuffer是线程安全的，相当于一个线程安全的StringBuilder")]),t._v(" "),a("p",[t._v("E，Properties实现了Map接口，是线程安全的")]),t._v(" "),a("p",[t._v("难道我们只能单纯的背java的那个类是线程安全的，那个类不是线程安全的么？\n这和授人以鱼有何区别呢？难道就没有一种方法授人以渔？直接教我们如何去判断一个类是否是线程安全的？\njava中的线程安全是什么：\n就是线程同步的意思，就是当一个程序对一个线程安全的方法或者语句进行访问的时候，其他的不能再对他进行操作了，必须等到这次访问结束以后才能对这个线程安全的方法进行访问\n什么叫线程安全：\n如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。\n或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。\n线程安全问题都是由全局变量及静态变量引起的。\n若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。\n看过vector源码的同学就会知道他的许多操作都是加了synchronized修饰的比如他的添加元素。")])])}),[],!1,null,null,null);s.default=e.exports}}]);