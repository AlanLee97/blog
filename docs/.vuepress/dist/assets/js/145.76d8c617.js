(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{484:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第17次题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第17次题"}},[t._v("#")]),t._v(" 第17次题")]),t._v(" "),a("p",[a("strong",[t._v("1. 执行下列程序的输出结果为（   ）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1 == s2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1 != s2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1 equals s2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1 not equals s2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("s1 != s2\ns1 equals s2\n")])])]),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("s1直接指向常量池中的字符串变量（没有就在常量池创建一个） s2是指向堆里的一个字符串对象，对象里面有常量池中字符串对象的引用")]),t._v(" "),a("p",[a("strong",[t._v("2. 以下代码的输出结果为")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1\n")])])]),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("首先开API看一下spit方法")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20190702/499715882_1562070409656_A9D9AC9C92130BAB34B3522650ED07D0",alt:"img"}})]),t._v(" "),a("p",[t._v("返回的是String[ ]，那调用length()肯定是不可能正常编译运行的，果然")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20190702/499715882_1562070588543_2997F7EB3126DFC9D59CC4C597EB7D0D",alt:"img"}})]),t._v(" "),a("p",[t._v("这里补充一点：")]),t._v(" "),a("p",[t._v("String获取长度用的是length（）方法，而数组类型我们直接用属性length获取长度，所以String[]数组类型我们应该用length获取长度")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20190702/499715882_1562070819396_859067F75C20B6E7DC82146BAD4E0775",alt:"img"}})]),t._v(" "),a("p",[t._v("跑出来的结果是1，然后我输出str1[0]结果是[],也就是空数组")]),t._v(" "),a("p",[a("strong",[t._v("3. 抽象类方法的访问权限默认都是public。（  ）")])]),t._v(" "),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("错误\n")])])]),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[t._v("关于抽象类")]),t._v(" "),a("p",[t._v("JDK 1.8以前，抽象类的方法默认访问权限为protected")]),t._v(" "),a("p",[t._v("JDK 1.8时，抽象类的方法默认访问权限变为default")]),t._v(" "),a("p",[t._v("关于接口")]),t._v(" "),a("p",[t._v("JDK 1.8以前，接口中的方法必须是public的")]),t._v(" "),a("p",[t._v("JDK 1.8时，接口中的方法可以是public的，也可以是default的")]),t._v(" "),a("p",[t._v("JDK 1.9时，接口中的方法可以是private的")]),t._v(" "),a("p",[a("strong",[t._v("4. 下面有关servlet的层级结构和常用的类，说法正确的有?")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("A、GenericServlet类：抽象类，定义一个通用的、独立于底层协议的Servlet。\nB、大多数Servlet通过从GenericServlet或HttpServlet类进行扩展来实现\nC、ServletConfig接口定义了在Servlet初始化的过程中由Servlet容器传递给Servlet得配置信息对象\nD、HttpServletRequest接口扩展ServletRequest接口，为HTTP Servlet提供HTTP请求信息\n")])])]),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("ABCD")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20170518/1562929_1495091266467_AA89EDF1B0D43CAA9A893C73A1615398",alt:"img"}})]),t._v(" "),a("p",[t._v("HttpServlet是GenericServlet的子类。\nGenericServlet是个抽象类，必须给出子类才能实例化。它给 出了设计servlet的一些骨架，定义了servlet生命周期，还有一些得到名字、配置、初始化参数的方法，其设计的是和应用层协议无关的，也就是说 你有可能用非http协议实现它。\nHttpServlet是子类，当然就具有GenericServlet的一切特性，还添加了doGet, doPost, doDelete, doPut, doTrace等方法对应处理http协议里的命令的请求响应过程。\n一般没有特殊需要，自己写的Servlet都扩展HttpServlet 。")]),t._v(" "),a("p",[a("strong",[t._v("5. 哪些内存区域属于JVM规范？（　　）")])]),t._v(" "),a("p",[a("strong",[t._v("答案")])]),t._v(" "),a("p",[t._v("JVM内存区：程序计数器、虚拟机栈、本地方法栈、堆、方法区（包括常量池）。")]),t._v(" "),a("p",[a("strong",[t._v("解释")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20190314/242025553_1552556718666_11CD8DF4C9693369E94F5F84238EBBC6",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("6. 关于Java中的数组，下面的一些描述，哪些描述是准确的：（  ）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("A、数组是一个对象，不同类型的数组具有不同的类\nB、数组长度是可以动态调整的\nC、数组是一个连续的存储结构\nD、一个固定长度的数组可类似这样定义: int array[100]\nE、两个数组用equals方法比较时，会逐个便利其中的元素，对每个元素进行比较\nF、可以二维数组，且可以有多维数组，都是在Java中合法的\n")])])]),a("p",[t._v("答案")]),t._v(" "),a("p",[t._v("A C F")]),t._v(" "),a("p",[t._v("解释")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20190906/200363574_1567760472632_522D5A4C43009D74D65824C4059EE6CB",alt:"img"}})]),t._v(" "),a("p",[t._v("数组是一种引用数据类型 那么他肯定是继承Object类的 所以里面有equals() 方法 但是肯定没有重写过 因为他并不是比较数组内的内容")]),t._v(" "),a("p",[t._v("使用Arrays.equals() 是比较两个数组中的内容。")])])}),[],!1,null,null,null);s.default=e.exports}}]);