(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{412:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第3次题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第3次题"}},[s._v("#")]),s._v(" 第3次题")]),s._v(" "),a("p",[a("strong",[s._v("1. 有程序片段如下，以下表达式结果为 true 的是（ ）")])]),s._v(" "),a("p",[s._v("Float s=new Float(0.1f);")]),s._v(" "),a("p",[s._v("Float t=new Float(0.1f);")]),s._v(" "),a("p",[s._v("Double u=new Double(0.1);")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("A、s==t\nB、s.equals(t)\nC、u.equals(s)\nD、t.equals(u)\n")])])]),a("p",[a("strong",[s._v("答案")])]),s._v(" "),a("p",[s._v("B、s.equals(t)")]),s._v(" "),a("p",[a("strong",[s._v("解释")])]),s._v(" "),a("p",[s._v("Float类和Double类都重写对于的equals方法，在比较之前都会判断是否同属于Float对象或Double对象，如果不是直接返回false，如果是再继续比较对应的数值大小。")]),s._v(" "),a("p",[s._v("题目A比较的是两个对象的地址，显然不同的对象地址不同，A是false。B同属于Float对象且值相等，true。C和D比较的对象不同，false。")]),s._v(" "),a("p",[a("strong",[s._v("2. 下面代码的执行结果是 :")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),s._v(" objref "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" objref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestChinese")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),s._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),s._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Chinese")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("选项")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("true\nfalse\nTRUE\nFALSE\n")])])]),a("p",[a("strong",[s._v("答案")])]),s._v(" "),a("p",[s._v("true")]),s._v(" "),a("p",[a("strong",[s._v("解释")])]),s._v(" "),a("p",[s._v("单例模式，obj1和obj2其实是一个对象,应该返回true!")]),s._v(" "),a("p",[s._v("单例模式: 第一步，不让外部调用创建对象，所以把构造器私有化，用private修饰。 第二步，怎么让外部获取本类的实例对象？通过本类提供一个方法，供外部调用获取实例。由于没有对象调用，所以此方法为类方法，用static修饰。 第三步，通过方法返回实例对象，由于类方法(静态方法)只能调用静态方法，所以存放该实例的变量改为类变量，用static修饰。 最后，类变量，类方法是在类加载时初始化的，只加载一次。所以由于外部不能创建对象，而且本来实例只在类加载时创建一次。")]),s._v(" "),a("p",[a("strong",[s._v("3. 下列方法中哪个是线程执行的方法？ （）")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("run（）\nstart（）\nsleep（）\nsuspend（）\n")])])]),a("p",[a("strong",[s._v("答案")])]),s._v(" "),a("p",[s._v("run（）")]),s._v(" "),a("p",[a("strong",[s._v("解释")])]),s._v(" "),a("p",[s._v("答案是A")]),s._v(" "),a("p",[s._v("run()方法用来执行线程体中具体的内容")]),s._v(" "),a("p",[s._v("start()方法用来启动线程对象，使其进入就绪状态")]),s._v(" "),a("p",[s._v("sleep()方法用来使线程进入睡眠状态")]),s._v(" "),a("p",[s._v("suspend()方法用来使线程挂起，要通过resume()方法使其重新启动")]),s._v(" "),a("p",[a("strong",[s._v("4. CMS垃圾回收器在那些阶段是没用用户线程参与的")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("初始标记\n并发标记\n重新标记\n并发清理\n")])])]),a("p",[a("strong",[s._v("答案")])]),s._v(" "),a("p",[s._v("初始标记、重新标记")]),s._v(" "),a("p",[a("strong",[s._v("解释")])]),s._v(" "),a("p",[s._v("用户线程（user-level threads）指不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统核心，应用进程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。\nCMS的GC过程有6个阶段（4个并发，2个暂停其它应用程序）")]),s._v(" "),a("ol",[a("li",[s._v("初次标记(STW initial mark)")]),s._v(" "),a("li",[s._v("并发标记(Concurrent marking)")]),s._v(" "),a("li",[s._v("并发可中断预清理(Concurrent precleaning)")]),s._v(" "),a("li",[s._v("最终重新标记(STW remark)")]),s._v(" "),a("li",[s._v("并发清理(Concurrent sweeping)")]),s._v(" "),a("li",[s._v("并发重置(Concurrent reset)\n在初次标记，重新标志的时候，要求我们暂停其它应用程序，那么这两个阶段用户线程是不会参与的")])]),s._v(" "),a("p",[a("strong",[s._v("5. JAVA 中可以让线程停止执行方法有（）")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sleep();\nnotify();\nsynchronized();\nyield();\n")])])]),a("p",[a("strong",[s._v("答案")])]),s._v(" "),a("p",[s._v("sleep();\nsynchronized();\nyield();")]),s._v(" "),a("p",[a("strong",[s._v("解释")])]),s._v(" "),a("ol",[a("li",[s._v("sleep()线程休眠后会进入Runnable状态，也就是停止执行了。要再次被调度程序选中然后获得cpu时间片才会被执行。Thread.sleep(0)就是个很好的例子，就是让大家再抢一次cpu时间片。sleep()是线程本身的静态方法，谁调用谁休眠，就算a线程调用b线程的sleep也是a线程休眠。")]),s._v(" "),a("li",[s._v("另外join方法调用后会等待线程执行完成后又会进入Runnable状态")]),s._v(" "),a("li",[s._v("等待用户输入的线程，用户输入之后也会重新进入Runnable状态")])]),s._v(" "),a("p",[s._v("以上三种都是blocked状态的三种情况")]),s._v(" "),a("p",[s._v("另外synchronized修饰的方法和类，会让没抢到锁的线程停止执行，yield是让当前执行的线程让出cpu时间片（并不是线程本身的方法），也算让线程停止执行了。只要不是Running状态都是停止执行了")])])}),[],!1,null,null,null);t.default=e.exports}}]);